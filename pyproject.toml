[project]
name = "mart"
version = "0.2.0"
description = "Modular Adversarial Robustness Toolkit"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
  { name = "Intel Corporation", email = "weilin.xu@intel.com" },
]

requires-python = ">=3.9"

dependencies = [
  "torch ~= 1.12.1",
  "torchvision ~= 0.13.1",
  "pytorch-lightning ~= 1.6.5",
  "torchmetrics == 0.6.0",

  # --------- hydra --------- #
  "hydra-core ~= 1.2.0",
  "hydra-colorlog ~= 1.2.0",
  "hydra-optuna-sweeper ~= 1.2.0",

  # --------- loggers --------- #
  # wandb
  # neptune-client
  # mlflow
  # comet-ml

  # --------- others --------- #
  "pyrootutils ~= 1.0.4",      # standardizing the project root setup
  "pre-commit ~= 2.20.0",      # hooks for applying linters on commit
  "rich ~= 12.6.0",            # beautiful text formatting in terminal
  "pytest ~= 7.2.0",           # tests
  "sh ~= 1.14.3",              # for running bash commands in some tests
  "timm ~= 0.6.11",            # pytorch image models
  "wheel",                     # support setup.py

  # ----- object detection----- #
  "pycocotools ~= 2.0.5",

  # -------- Adversary ---------#
  "robustbench @ git+https://github.com/RobustBench/robustbench.git@9a590683b7daecf963244dea402529f0d728c727"
]

[project.urls]
Source = "https://github.com/IntelLabs/MART"

[project.scripts]
mart = "mart.__main__:main"

[project.optional-dependencies]
developer = [
  "pre-commit",
  "pytest",
  "wheel"
]

[tool.setuptools]
zip-safe = false

[tool.setuptools.packages.find]
include = ["mart*", "hydra_plugins*"]

[tool.setuptools.package-data]
"*" = ["*.yaml"]

[tool.pytest.ini_options]
addopts = [
  "--color=yes",
  "--durations=0",
  "--strict-markers",
  "--doctest-modules",
]
filterwarnings = [
  "ignore::DeprecationWarning",
  "ignore::UserWarning",
]
log_cli = "True"
markers = [
  "slow: slow tests",
]
minversion = "6.0"
testpaths = "tests/"

[tool.coverage.report]
exclude_lines = [
    "pragma: nocover",
    "raise NotImplementedError",
    "raise NotImplementedError()",
    "if __name__ == .__main__.:",
]
