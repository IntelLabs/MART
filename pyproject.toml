[project]
name = "mart"
version = "0.7.0a0"
description = "Modular Adversarial Robustness Toolkit"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
  { name = "Intel Corporation", email = "weilin.xu@intel.com" },
]

requires-python = ">=3.9"

dependencies = [
  # --------- hydra --------- #
  "hydra-core ~= 1.2.0",
  "hydra-colorlog ~= 1.2.0",
  "hydra-optuna-sweeper ~= 1.2.0",

  # --------- basics --------- #
  "pyrootutils ~= 1.0.4",      # standardizing the project root setup
  "rich ~= 12.6.0",            # beautiful text formatting in terminal
  "fire == 0.5.0",
]

[project.urls]
Source = "https://github.com/IntelLabs/MART"

[project.scripts]
mart = "mart.__main__:main"

[project.optional-dependencies]

# These are required dependencies, but we make it flexible for users to adjust.
core = [
  "torch >= 2.0.1",
  # TODO: Move torchvision to the optional vision group, and make optional tests locally, but required tests on CI.
  "torchvision >= 0.15.2",
  # TODO: Move pycocotools to the optional objdet group, and make optional tests.
  "pycocotools ~= 2.0.5",      # data format for object detection.
  "lightning[extra] ~= 2.0.5", # Full functionality including TensorboardX.
  "torchmetrics == 1.0.1",
  # TODO: Remove pydantic and numpy constraints with newer lightning.
  "pydantic == 1.10.14",       # https://github.com/Lightning-AI/lightning/pull/18022/files
  "numpy == 1.23.5",           # https://github.com/pytorch/pytorch/issues/91516
]

vision = [
  "timm ~= 0.6.11",            # pytorch image models
]

objdet = [
  "fiftyone ~= 0.21.4",        # visualization for object detection
]

# Comment out loggers to avoid lengthy dependency resolution.
# It is rare that users need more than one logger.
# And lightning[extra] already includes TensorboardX.
loggers = [
#  "wandb",
#  "neptune",
#  "mlflow",
#  "comet-ml",
]

developer = [
  "pre-commit ~= 2.20.0",      # hooks for applying linters on commit
  "pytest ~= 7.2.0",           # tests
  "sh ~= 1.14.3",              # for running bash commands in some tests
  "wheel",                     # support setup.py
  "pytest-cov[toml]",
  "protobuf==3.20.0"
]

full = [
  "mart[core,vision,objdet,loggers,developer]",
]

extras = [
]

[tool.setuptools]
zip-safe = false

[tool.setuptools.packages.find]
include = ["mart*", "hydra_plugins*"]

[tool.setuptools.package-data]
"*" = ["*.yaml"]

[tool.pytest.ini_options]
addopts = [
  "--color=yes",
  "--durations=0",
  "--strict-markers",
  "--doctest-modules",
]
filterwarnings = [
  "ignore::DeprecationWarning",
  "ignore::UserWarning",
]
log_cli = "True"
markers = [
  "slow: slow tests",
]
minversion = "6.0"
testpaths = "tests/"

[tool.coverage.report]
exclude_lines = [
    "pragma: nocover",
    "raise NotImplementedError",
    "raise NotImplementedError()",
    "if __name__ == .__main__.:",
]
