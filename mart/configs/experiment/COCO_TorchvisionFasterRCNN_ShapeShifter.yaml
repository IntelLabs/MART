# @package _global_

defaults:
  - /attack/perturber@model.modules.perturber: default
  - /attack/perturber/initializer@model.modules.perturber.initializer: uniform
  - /attack/perturber/composer@model.modules.perturber.composer: color_jitter_warp_composite
  - /attack/perturber/projector@model.modules.perturber.projector: range
  - /attack/gradient_modifier@model.gradient_modifier: lp_normalizer
  - override /datamodule: coco
  - override /model: torchvision_faster_rcnn
  - override /metric: average_precision
  - override /optimization: super_convergence
  - override /callbacks:
      [model_checkpoint, lr_monitor, perturbation_visualizer, gradient_monitor, freeze]

task_name: "COCO_TorchvisionFasterRCNN_ShapeShifter"
tags: ["adv"]

optimized_metric: "test_metrics/map"

callbacks:
  model_checkpoint:
    monitor: "validation_metrics/map"
    mode: "min"

  freeze:
    module: "losses_and_detections"

trainer:
  # 117,266 training images, 6 epochs, batch_size=2, 351798
  max_steps: 351798
  # FIXME: "nms_kernel" not implemented for 'BFloat16', torch.ops.torchvision.nms().
  precision: 32

datamodule:
  num_workers: 8
  ims_per_batch: 2

model:
  modules:
    perturber:
      size: [3, 416, 416]

      initializer:
        min: 127
        max: 129

      composer:
        warp:
          _target_: torchvision.transforms.Compose
          transforms:
            - _target_: mart.transforms.ColorJitter
              brightness: [0.5, 1.5]
              contrast: [0.5, 1.5]
              saturation: [0.5, 1.0]
              hue: [-0.05, 0.05]
            - _target_: torchvision.transforms.RandomAffine
              degrees: [-5, 5]
              translate: [0.1, 0.25]
              scale: [0.4, 0.6]
              shear: [-3, 3, -3, 3]
              interpolation: 2 # BILINEAR
        clamp: [0, 255]

    losses_and_detections:
      model:
        num_classes: null # inferred by torchvision
        weights: COCO_V1

  optimizer:
    lr: 25.5
    momentum: 0.9
    maximize: True

  gradient_modifier:
    p: inf

  training_sequence:
    seq005: perturber

    seq010:
      preprocessor: ["perturber"]

  validation_sequence: ${.training_sequence}

  test_sequence: ${.validation_sequence}
