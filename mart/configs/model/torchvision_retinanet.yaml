# We simply wrap a torchvision object detection model for validation.
defaults:
  - torchvision_object_detection

load_state_dict:
  detector:
    _target_: hydra.utils._locate # FIXME: Use hydra.utils.get_object when available
    path: "torchvision.models.detection.RetinaNet_ResNet50_FPN_Weights.COCO_V1"

# log all losses separately in training.
training_step_log:
  loss_classifier: "losses.classification"
  loss_box_reg: "losses.bbox_regression"

training_sequence:
  seq010:
    preprocessor: ["input"]

  seq020:
    detector:
      _name_: losses
      images: preprocessor
      targets: target
      train_mode: True

  seq030:
    detector:
      _name_: preds
      images: preprocessor
      targets: target
      train_mode: False
      inference_mode: True

  seq100:
    loss:
      # Sum up the losses.
      ["losses.classification", "losses.bbox_regression"]

validation_sequence:
  seq010:
    preprocessor: ["input"]

  seq020:
    detector:
      _name_: losses
      images: preprocessor
      targets: target
      train_mode: True

  seq030:
    detector:
      _name_: preds
      images: preprocessor
      targets: target
      train_mode: False
      inference_mode: True

test_sequence:
  seq010:
    preprocessor: ["input"]

  seq020:
    detector:
      _name_: losses
      images: preprocessor
      targets: target
      train_mode: True

  seq030:
    detector:
      _name_: preds
      images: preprocessor
      targets: target
      train_mode: False
      inference_mode: True

modules:
  detector:
    _target_: mart.nn.Module
    _path_: torchvision.models.detection.retinanet_resnet50_fpn
    num_classes: ???
