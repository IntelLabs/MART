# We simply wrap a torchvision object detection model for validation.
defaults:
  - torchvision_object_detection

# log all losses separately in training.
training_step_log:
  loss_classifier: "losses_and_detections.training.classification"
  loss_box_reg: "losses_and_detections.training.bbox_regression"

training_sequence:
  - losses_and_detections: ["input", "target"]
  - loss:
      # Sum up the losses.
      [
        "losses_and_detections.training.classification",
        "losses_and_detections.training.bbox_regression",
      ]

validation_sequence:
  - losses_and_detections: ["input", "target"]

test_sequence:
  - losses_and_detections: ["input", "target"]

modules:
  losses_and_detections:
    # _target_: mart.models.DualMode
    model:
      _target_: torchvision.models.detection.retinanet_resnet50_fpn
      num_classes: ???
