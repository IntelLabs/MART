# We simply wrap a torchvision object detection model for validation.
defaults:
  - torchvision_object_detection

# log all losses separately in training.
training_step_log:
  [
    "rpn_loss.loss_objectness",
    "rpn_loss.loss_rpn_box_reg",
    "box_loss.loss_classifier",
    "box_loss.loss_box_reg",
    "loss",
  ]

training_sequence:
  - input_adv_training:
      _call_with_args_: ["input", "target"]
      model: model
      step: step
  - preprocessor: ["input_adv_training"]
  - losses_and_detections: ["preprocessor", "target"]
  - loss:
      # Sum up the losses.
      [
        "losses_and_detections.training.loss_objectness",
        "losses_and_detections.training.loss_rpn_box_reg",
        "losses_and_detections.training.loss_classifier",
        "losses_and_detections.training.loss_box_reg",
      ]
  - output:
      # Output all losses for logging, defined in model.training_step_log
      {
        "preds": "losses_and_detections.eval",
        "target": "target",
        "loss": "loss",
        "rpn_loss.loss_objectness": "losses_and_detections.training.loss_objectness",
        "rpn_loss.loss_rpn_box_reg": "losses_and_detections.training.loss_rpn_box_reg",
        "box_loss.loss_classifier": "losses_and_detections.training.loss_classifier",
        "box_loss.loss_box_reg": "losses_and_detections.training.loss_box_reg",
      }

validation_sequence:
  - input_adv_validation:
      _call_with_args_: ["input", "target"]
      model: model
      step: step
  - preprocessor: ["input_adv_validation"]
  - losses_and_detections: ["preprocessor", "target"]
  - output:
      {
        "preds": "losses_and_detections.eval",
        "target": "target",
        "rpn_loss.loss_objectness": "losses_and_detections.training.loss_objectness",
        "rpn_loss.loss_rpn_box_reg": "losses_and_detections.training.loss_rpn_box_reg",
        "box_loss.loss_classifier": "losses_and_detections.training.loss_classifier",
        "box_loss.loss_box_reg": "losses_and_detections.training.loss_box_reg",
      }

test_sequence:
  - input_adv_test:
      _call_with_args_: ["input", "target"]
      model: model
      step: step
  - preprocessor: ["input_adv_test"]
  - losses_and_detections: ["preprocessor", "target"]
  - output:
      {
        "preds": "losses_and_detections.eval",
        "target": "target",
        "rpn_loss.loss_objectness": "losses_and_detections.training.loss_objectness",
        "rpn_loss.loss_rpn_box_reg": "losses_and_detections.training.loss_rpn_box_reg",
        "box_loss.loss_classifier": "losses_and_detections.training.loss_classifier",
        "box_loss.loss_box_reg": "losses_and_detections.training.loss_box_reg",
      }

modules:
  losses_and_detections:
    # 17s: DualModeGeneralizedRCNN
    # 23s: DualMode
    _target_: mart.models.DualModeGeneralizedRCNN
    model:
      weights_fpath: ???
      model:
        _target_: torchvision.models.detection.fasterrcnn_resnet50_fpn
        num_classes: ???
